/*
 * ONTAP REST API
 *
 * ONTAP 9.6 adds support for an expansive RESTful API. The documentation below provides information about the types of API calls available to you, as well as details about using each API endpoint. You can learn more about the ONTAP REST API and ONTAP in the ONTAP 9 Documentation Center:  http://docs.netapp.com/ontap-9/topic/com.netapp.doc.dot-rest-api/home.html. NetApp welcomes your comments and suggestions about the ONTAP REST API and the documentation for its use.</br> **Using the ONTAP 9.6 REST API online documentation** Each API method includes usage examples, as well as a model that displays all the required and optional properties supported by the method. Click the _Model_ link, available with each API method, to see all the required and optional properties supported by each method. 
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

type Svm struct {
	Links *InlineResponse201Links `json:"_links,omitempty"`
	// List of allowed aggregates for SVM volumes. An administrator is allowed to create volumes on these aggregates.
	Aggregates []DiskAggregates `json:"aggregates,omitempty"`
	Cifs *SvmCifs `json:"cifs,omitempty"`
	// Comment
	Comment string `json:"comment,omitempty"`
	Dns *SvmDns `json:"dns,omitempty"`
	Fcp *SvmFcp `json:"fcp,omitempty"`
	// IP interfaces for the SVM
	IpInterfaces []IpInterfaceSvm `json:"ip_interfaces,omitempty"`
	Ipspace *SvmIpspace `json:"ipspace,omitempty"`
	Iscsi *SvmIscsi `json:"iscsi,omitempty"`
	// Default volume language code. UTF-8 encoded languages are valid in POST or PATCH. Non UTF-8 language encodings are for backward compatibility and are not valid input for POST and PATCH requests.
	Language string `json:"language,omitempty"`
	Ldap *SvmLdap `json:"ldap,omitempty"`
	// The name of the SVM. 
	Name string `json:"name,omitempty"`
	Nfs *SvmNfs `json:"nfs,omitempty"`
	Nis *SvmNis `json:"nis,omitempty"`
	Nsswitch *SvmNsswitch `json:"nsswitch,omitempty"`
	Nvme *SvmNvme `json:"nvme,omitempty"`
	// Optional array of routes for the SVM
	Routes []NetworkRouteForSvm `json:"routes,omitempty"`
	SnapshotPolicy *SvmSnapshotPolicy `json:"snapshot_policy,omitempty"`
	// SVM State
	State string `json:"state,omitempty"`
	// SVM subtype. The SVM subtype sync_destination is created automatically when an SVM of subtype sync_source is created on the source MetroCluster cluster. A POST request with sync_destination as SVM subtype is invalid.
	Subtype string `json:"subtype,omitempty"`
	// The unique identifier of the SVM. 
	Uuid string `json:"uuid,omitempty"`
}
